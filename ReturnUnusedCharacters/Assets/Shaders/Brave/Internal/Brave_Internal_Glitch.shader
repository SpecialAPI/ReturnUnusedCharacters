// Upgrade NOTE: commented out 'float3 _WorldSpaceCameraPos', a built-in variable
// Upgrade NOTE: commented out 'float4 unity_DynamicLightmapST', a built-in variable
// Upgrade NOTE: commented out 'float4 unity_LightmapST', a built-in variable
// Upgrade NOTE: commented out 'float4 unity_ShadowFadeCenterAndType', a built-in variable

Shader "Brave/Internal/Glitch"
{
	Properties
	{
		_MainTex ("Base (RGB)", 2D) = "white" { }
		_Perpendicular ("Is Perpendicular Tilt", Float) = 1
		_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
		_Color ("Tint", Color) = (1,1,1,1)
		[MaterialToggle] PixelSnap ("Pixel snap", Float) = 0
		_GlitchInterval ("Glitch interval time [seconds]", Float) = 0.1
		_DispProbability ("Displacement Glitch Probability", Float) = 0.4
		_DispIntensity ("Displacement Glitch Intensity", Float) = 0.01
		_ColorProbability ("Color Glitch Probability", Float) = 0.4
		_ColorIntensity ("Color Glitch Intensity", Float) = 0.04
		[MaterialToggle] _WrapDispCoords ("Wrap disp glitch (off = clamp)", Float) = 1
		[MaterialToggle] _DispGlitchOn ("Displacement Glitch On", Float) = 1
		[MaterialToggle] _ColorGlitchOn ("Color Glitch On", Float) = 1
	}
	SubShader
	{
		LOD 110
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }

		Pass
		{
			Name "FORWARD"
			LOD 110
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
			ColorMask RGB 0
			Cull Off
			Fog {
			Mode Off
			}
			Lighting On
			Name "FORWARD"
			LOD 110
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
			Blend One One, One One
			ColorMask RGB 0
			ZWrite Off
			Cull Off
			Fog {
			Mode Off
			}
			Lighting On
			Name "META"
			LOD 110
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
			Cull Off
			Fog {
			Mode Off
			}
			Lighting On

			CGPROGRAM

			#pragma multi_compile DIRECTIONAL POINT SPOT POINT_COOKIE DIRECTIONAL_COOKIE
			#pragma multi_compile LIGHTPROBE_SH SHADOWS_SCREEN VERTEXLIGHT_ON
			#pragma multi_compile LIGHTPROBE_SH VERTEXLIGHT_ON
			#pragma multi_compile VERTEXLIGHT_ON
			#pragma vertex vert
			#pragma fragment frag

			#include "UnityCG.cginc"

			struct VertexInput
			{
				float4 in_POSITION0 : POSITION;
				float3 in_NORMAL0;
				float4 in_TEXCOORD0 : TEXCOORD0;
				float4 in_COLOR0 : COLOR0;
				float4 in_TEXCOORD1 : TEXCOORD1;
				float4 in_TEXCOORD2 : TEXCOORD2;
			};

			struct FragmentInput
			{
				float4 gl_Position : SV_POSITION;
				float2 vs_TEXCOORD0 : TEXCOORD0;
				float3 vs_TEXCOORD2 : TEXCOORD2;
				float4 vs_COLOR0 : COLOR0;
				float4 vs_TEXCOORD3 : TEXCOORD3;
				float3 vs_TEXCOORD4 : TEXCOORD4;
				float4 vs_TEXCOORD7 : TEXCOORD7;
				float4 vs_TEXCOORD5 : TEXCOORD5;
				float4 vs_TEXCOORD1 : TEXCOORD1;
			};

			float _ReflectionYFactor;
			float _ReflectionYOffset;
			float4 _MainTex_ST;
			float4 _LightColor0;
			float _GlitchInterval;
			float _DispIntensity;
			float _DispProbability;
			float _ColorIntensity;
			float _ColorProbability;
			float _DispGlitchOn;
			float _ColorGlitchOn;
			float _WrapDispCoords;
			float _Cutoff;
			sampler2D _MainTex;
			// float3 _WorldSpaceCameraPos;
			// float4 unity_ShadowFadeCenterAndType;
			// float4 unity_LightmapST;
			// float4 unity_DynamicLightmapST;

			FragmentInput vert(VertexInput input)
			{
				FragmentInput output;

				float4 u_xlat0;
				float4 u_xlat1;
				float4 u_xlat2;
				float u_xlat3;
				float u_xlat10;
				float3 u_xlat3;
				float u_xlat4;
				float u_xlat13;
				float u_xlat11;
				float4 u_xlat3;
				float3 u_xlat4;
				float u_xlat5;
				float u_xlat17;
				float4 u_xlat4;
				float u_xlat16;
				float4 u_xlat5;
				float u_xlat6;
				float u_xlat18;
				float u_xlat19;
				float u_xlat20;
				float4 u_xlat6;
				float u_xlat7;
				float u_xlat21;
				float u_xlat23;
				float u_xlat2;
				bool u_xlatb2;
				bool u_xlatb6;

				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat3 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat3 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat1.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat1.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat1.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
				u_xlat10 = inversesqrt(u_xlat10);
				output.vs_TEXCOORD1.xyz = float3(u_xlat10) * u_xlat1.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_TEXCOORD3 = u_xlat0;
				output.vs_COLOR0 = input.in_COLOR0;
				output.vs_TEXCOORD4.xyz = float3(0.0, 0.0, 0.0);
				output.vs_TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat4 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat4 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat1.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat1.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat1.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
				u_xlat13 = inversesqrt(u_xlat13);
				u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
				output.vs_TEXCOORD1.xyz = u_xlat1.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_TEXCOORD3 = u_xlat0;
				output.vs_COLOR0 = input.in_COLOR0;
				u_xlat0.x = u_xlat1.y * u_xlat1.y;
				u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
				u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
				u_xlat3.x = dot(unity_SHBr, u_xlat2);
				u_xlat3.y = dot(unity_SHBg, u_xlat2);
				u_xlat3.z = dot(unity_SHBb, u_xlat2);
				u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
				u_xlat1.w = 1.0;
				u_xlat2.x = dot(unity_SHAr, u_xlat1);
				u_xlat2.y = dot(unity_SHAg, u_xlat1);
				u_xlat2.z = dot(unity_SHAb, u_xlat1);
				u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
				u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
				u_xlat0.xyz = log2(u_xlat0.xyz);
				u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
				u_xlat0.xyz = exp2(u_xlat0.xyz);
				u_xlat0.xyz = u_xlat0.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
				output.vs_TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
				output.vs_TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat3 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat3 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				u_xlat1 = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.gl_Position = u_xlat1;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat2.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat2.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat2.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
				u_xlat11 = inversesqrt(u_xlat11);
				output.vs_TEXCOORD1.xyz = float3(u_xlat11) * u_xlat2.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_TEXCOORD3 = u_xlat0;
				output.vs_COLOR0 = input.in_COLOR0;
				output.vs_TEXCOORD4.xyz = float3(0.0, 0.0, 0.0);
				u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
				u_xlat0.w = u_xlat0.x * 0.5;
				u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
				output.vs_TEXCOORD5.zw = u_xlat1.zw;
				output.vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
				output.vs_TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat5 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat5 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				u_xlat1 = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.gl_Position = u_xlat1;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat2.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat2.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat2.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
				u_xlat17 = inversesqrt(u_xlat17);
				u_xlat2.xyz = float3(u_xlat17) * u_xlat2.xyz;
				output.vs_TEXCOORD1.xyz = u_xlat2.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_TEXCOORD3 = u_xlat0;
				output.vs_COLOR0 = input.in_COLOR0;
				u_xlat0.x = u_xlat2.y * u_xlat2.y;
				u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
				u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
				u_xlat4.x = dot(unity_SHBr, u_xlat3);
				u_xlat4.y = dot(unity_SHBg, u_xlat3);
				u_xlat4.z = dot(unity_SHBb, u_xlat3);
				u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
				u_xlat2.w = 1.0;
				u_xlat3.x = dot(unity_SHAr, u_xlat2);
				u_xlat3.y = dot(unity_SHAg, u_xlat2);
				u_xlat3.z = dot(unity_SHAb, u_xlat2);
				u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
				u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
				u_xlat0.xyz = log2(u_xlat0.xyz);
				u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
				u_xlat0.xyz = exp2(u_xlat0.xyz);
				u_xlat0.xyz = u_xlat0.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
				output.vs_TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
				u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
				u_xlat0.w = u_xlat0.x * 0.5;
				u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
				output.vs_TEXCOORD5.zw = u_xlat1.zw;
				output.vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
				output.vs_TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat5 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat5 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat1.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat1.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat1.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
				u_xlat16 = inversesqrt(u_xlat16);
				u_xlat1.xyz = float3(u_xlat16) * u_xlat1.xyz;
				output.vs_TEXCOORD1.xyz = u_xlat1.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_COLOR0 = input.in_COLOR0;
				output.vs_TEXCOORD3 = u_xlat0;
				u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
				u_xlat3 = u_xlat1.yyyy * u_xlat2;
				u_xlat2 = u_xlat2 * u_xlat2;
				u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
				u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
				u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
				u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
				u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
				u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
				u_xlat1 = max(u_xlat2, float4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
				u_xlat2 = inversesqrt(u_xlat1);
				u_xlat1 = u_xlat1 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
				u_xlat1 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
				u_xlat0 = u_xlat0 * u_xlat2;
				u_xlat0 = max(u_xlat0, float4(0.0, 0.0, 0.0, 0.0));
				u_xlat0 = u_xlat1 * u_xlat0;
				u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
				u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
				u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
				output.vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
				output.vs_TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat6 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat6 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat1.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat1.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat1.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
				u_xlat19 = inversesqrt(u_xlat19);
				u_xlat1.xyz = float3(u_xlat19) * u_xlat1.xyz;
				output.vs_TEXCOORD1.xyz = u_xlat1.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_COLOR0 = input.in_COLOR0;
				output.vs_TEXCOORD3 = u_xlat0;
				u_xlat18 = u_xlat1.y * u_xlat1.y;
				u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
				u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
				u_xlat3.x = dot(unity_SHBr, u_xlat2);
				u_xlat3.y = dot(unity_SHBg, u_xlat2);
				u_xlat3.z = dot(unity_SHBb, u_xlat2);
				u_xlat2.xyz = unity_SHC.xyz * float3(u_xlat18) + u_xlat3.xyz;
				u_xlat1.w = 1.0;
				u_xlat3.x = dot(unity_SHAr, u_xlat1);
				u_xlat3.y = dot(unity_SHAg, u_xlat1);
				u_xlat3.z = dot(unity_SHAb, u_xlat1);
				u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
				u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
				u_xlat2.xyz = log2(u_xlat2.xyz);
				u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
				u_xlat2.xyz = exp2(u_xlat2.xyz);
				u_xlat2.xyz = u_xlat2.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
				u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
				u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
				u_xlat4 = u_xlat1.yyyy * u_xlat3;
				u_xlat3 = u_xlat3 * u_xlat3;
				u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
				u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
				u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
				u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
				u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
				u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
				u_xlat1 = max(u_xlat3, float4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
				u_xlat3 = inversesqrt(u_xlat1);
				u_xlat1 = u_xlat1 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
				u_xlat1 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
				u_xlat0 = u_xlat0 * u_xlat3;
				u_xlat0 = max(u_xlat0, float4(0.0, 0.0, 0.0, 0.0));
				u_xlat0 = u_xlat1 * u_xlat0;
				u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
				u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
				u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
				u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
				output.vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
				output.vs_TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat6 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat6 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				u_xlat1 = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.gl_Position = u_xlat1;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat2.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat2.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat2.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
				u_xlat20 = inversesqrt(u_xlat20);
				u_xlat2.xyz = float3(u_xlat20) * u_xlat2.xyz;
				output.vs_TEXCOORD1.xyz = u_xlat2.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_COLOR0 = input.in_COLOR0;
				output.vs_TEXCOORD3 = u_xlat0;
				u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
				u_xlat4 = u_xlat2.yyyy * u_xlat3;
				u_xlat3 = u_xlat3 * u_xlat3;
				u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
				u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
				u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
				u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
				u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
				u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
				u_xlat2 = max(u_xlat3, float4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
				u_xlat3 = inversesqrt(u_xlat2);
				u_xlat2 = u_xlat2 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
				u_xlat2 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
				u_xlat0 = u_xlat0 * u_xlat3;
				u_xlat0 = max(u_xlat0, float4(0.0, 0.0, 0.0, 0.0));
				u_xlat0 = u_xlat2 * u_xlat0;
				u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
				u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
				u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
				output.vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
				u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
				u_xlat0.w = u_xlat0.x * 0.5;
				u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
				output.vs_TEXCOORD5.zw = u_xlat1.zw;
				output.vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
				output.vs_TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat7 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat7 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				u_xlat1 = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.gl_Position = u_xlat1;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat2.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat2.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat2.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
				u_xlat23 = inversesqrt(u_xlat23);
				u_xlat2.xyz = float3(u_xlat23) * u_xlat2.xyz;
				output.vs_TEXCOORD1.xyz = u_xlat2.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_COLOR0 = input.in_COLOR0;
				output.vs_TEXCOORD3 = u_xlat0;
				u_xlat21 = u_xlat2.y * u_xlat2.y;
				u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
				u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
				u_xlat4.x = dot(unity_SHBr, u_xlat3);
				u_xlat4.y = dot(unity_SHBg, u_xlat3);
				u_xlat4.z = dot(unity_SHBb, u_xlat3);
				u_xlat3.xyz = unity_SHC.xyz * float3(u_xlat21) + u_xlat4.xyz;
				u_xlat2.w = 1.0;
				u_xlat4.x = dot(unity_SHAr, u_xlat2);
				u_xlat4.y = dot(unity_SHAg, u_xlat2);
				u_xlat4.z = dot(unity_SHAb, u_xlat2);
				u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
				u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
				u_xlat3.xyz = log2(u_xlat3.xyz);
				u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
				u_xlat3.xyz = exp2(u_xlat3.xyz);
				u_xlat3.xyz = u_xlat3.xyz * float3(1.05499995, 1.05499995, 1.05499995) + float3(-0.0549999997, -0.0549999997, -0.0549999997);
				u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
				u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
				u_xlat5 = u_xlat2.yyyy * u_xlat4;
				u_xlat4 = u_xlat4 * u_xlat4;
				u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
				u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
				u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
				u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
				u_xlat4 = u_xlat0 * u_xlat0 + u_xlat4;
				u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
				u_xlat2 = max(u_xlat4, float4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
				u_xlat4 = inversesqrt(u_xlat2);
				u_xlat2 = u_xlat2 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
				u_xlat2 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
				u_xlat0 = u_xlat0 * u_xlat4;
				u_xlat0 = max(u_xlat0, float4(0.0, 0.0, 0.0, 0.0));
				u_xlat0 = u_xlat2 * u_xlat0;
				u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
				u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
				u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
				u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
				output.vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat3.xyz;
				u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
				u_xlat0.w = u_xlat0.x * 0.5;
				u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
				output.vs_TEXCOORD5.zw = u_xlat1.zw;
				output.vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
				output.vs_TEXCOORD7 = float4(0.0, 0.0, 0.0, 0.0);
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat3 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat3 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat1.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat1.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat1.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
				u_xlat10 = inversesqrt(u_xlat10);
				output.vs_TEXCOORD1.xyz = float3(u_xlat10) * u_xlat1.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_TEXCOORD3 = u_xlat0;
				output.vs_COLOR0 = input.in_COLOR0;
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat3 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat3 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat1.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat1.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat1.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
				u_xlat10 = inversesqrt(u_xlat10);
				output.vs_TEXCOORD1.xyz = float3(u_xlat10) * u_xlat1.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_TEXCOORD3 = u_xlat0;
				output.vs_COLOR0 = input.in_COLOR0;
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat3 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat3 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat1.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat1.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat1.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
				u_xlat10 = inversesqrt(u_xlat10);
				output.vs_TEXCOORD1.xyz = float3(u_xlat10) * u_xlat1.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_TEXCOORD3 = u_xlat0;
				output.vs_COLOR0 = input.in_COLOR0;
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat3 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat3 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat1.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat1.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat1.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
				u_xlat10 = inversesqrt(u_xlat10);
				output.vs_TEXCOORD1.xyz = float3(u_xlat10) * u_xlat1.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_TEXCOORD3 = u_xlat0;
				output.vs_COLOR0 = input.in_COLOR0;
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat3 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.x = input.in_POSITION0.y * u_xlat3 + u_xlat0.x;
				u_xlat0 = u_xlat0.xxxx * unity_ObjectToWorld[1];
				u_xlat0 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat0;
				u_xlat0 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat0;
				u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat0 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat0;
				u_xlat2 = u_xlat1.yyyy * UNITY_MATRIX_VP[1];
				u_xlat2 = UNITY_MATRIX_VP[0] * u_xlat1.xxxx + u_xlat2;
				u_xlat2 = UNITY_MATRIX_VP[2] * u_xlat1.zzzz + u_xlat2;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat1.wwww + u_xlat2;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				u_xlat1.x = dot(input.in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
				u_xlat1.y = dot(input.in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
				u_xlat1.z = dot(input.in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
				u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
				u_xlat10 = inversesqrt(u_xlat10);
				output.vs_TEXCOORD1.xyz = float3(u_xlat10) * u_xlat1.xyz;
				output.vs_TEXCOORD2.xyz = u_xlat0.xyz;
				output.vs_TEXCOORD3 = u_xlat0;
				output.vs_COLOR0 = input.in_COLOR0;
				u_xlat0.x = _ReflectionYOffset + -0.0625;
				u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
				u_xlat0.x = u_xlat0.x * 0.5;
				u_xlat2 = (-_ReflectionYFactor) + 1.0;
				u_xlat0.y = input.in_POSITION0.y * u_xlat2 + u_xlat0.x;
				u_xlatb6 = 0.0<input.in_POSITION0.z;
				u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
				u_xlat1.xy = input.in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				u_xlat0.xz = input.in_POSITION0.xz;
				u_xlat0.xzw = (unity_MetaVertexControl.x) ? u_xlat1.xyz : u_xlat0.xyz;
				u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
				u_xlat1 = unity_ObjectToWorld[0] * input.in_POSITION0.xxxx + u_xlat1;
				u_xlat1 = unity_ObjectToWorld[2] * input.in_POSITION0.zzzz + u_xlat1;
				output.vs_TEXCOORD1 = unity_ObjectToWorld[3] * input.in_POSITION0.wwww + u_xlat1;
				u_xlatb2 = 0.0<u_xlat0.w;
				u_xlat1.z = u_xlatb2 ? 9.99999975e-005 : float(0.0);
				u_xlat1.xy = input.in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xzw;
				u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
				u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
				u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
				u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
				u_xlat1 = u_xlat0.yyyy * UNITY_MATRIX_VP[1];
				u_xlat1 = UNITY_MATRIX_VP[0] * u_xlat0.xxxx + u_xlat1;
				u_xlat1 = UNITY_MATRIX_VP[2] * u_xlat0.zzzz + u_xlat1;
				output.gl_Position = UNITY_MATRIX_VP[3] * u_xlat0.wwww + u_xlat1;
				output.vs_TEXCOORD0.xy = input.in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
				output.vs_COLOR0 = input.in_COLOR0;

				return output;
			}

			fixed4 frag(FragmentInput output) : SV_Target
			{
				fixed4 finalOutput;

				float4 u_xlat0;
				bool u_xlatb0;
				float4 u_xlat1;
				float u_xlat16_1;
				bfloat2 u_xlatb1;
				float4 u_xlat2;
				bfloat3 u_xlatb2;
				float4 u_xlat3;
				float4 u_xlat10_3;
				float4 u_xlat10_4;
				float3 u_xlat5;
				bool u_xlatb5;
				float2 u_xlat10;
				float2 u_xlat11;
				float u_xlat16;
				u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4 : TEXCOORD4.xyz;
				u_xlat5.xyz = u_xlat1.xyz * _LightColor0.xyz;
				u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz;
				u_xlat2.w = 0.0;
				SV_Target0 = u_xlat1 + u_xlat2;
				return;
				}
				float4 u_xlat10_2;
				bool u_xlatb10;
				float u_xlat15;
				u_xlat10.x = dot(u_xlat2, unity_OcclusionMaskSelector);
				u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
				u_xlat2.xy = vs_TEXCOORD5 : TEXCOORD5.xy / vs_TEXCOORD5 : TEXCOORD5.ww;
				u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
				u_xlat0.x = u_xlat0.x + u_xlat10_2.x;
				u_xlat10.x = min(u_xlat0.x, u_xlat10.x);
				u_xlat0.x = (u_xlatb5) ? u_xlat10.x : u_xlat0.x;
				float u_xlat7;
				bool u_xlatb15;
				u_xlat15 = dot(u_xlat2, unity_OcclusionMaskSelector);
				u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
				u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
				u_xlat10_2 = texture(_LightTexture0, u_xlat0.xx);
				u_xlat0.x = u_xlat15 * u_xlat10_2.w;
				SV_Target0.xyz = u_xlat0.xxx * u_xlat5.xyz;
				SV_Target0.w = u_xlat1.w;
				float3 u_xlat7;
				bool u_xlatb7;
				float2 u_xlat12;
				u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
				u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
				u_xlatb7 = 0.0<u_xlat0.z;
				u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
				u_xlat12.xy = u_xlat0.xy / u_xlat0.ww;
				u_xlat12.xy = u_xlat12.xy + float2(0.5, 0.5);
				u_xlat10_3 = texture(_LightTexture0, u_xlat12.xy);
				u_xlat15 = u_xlat7.x * u_xlat10_3.w;
				u_xlat10_3 = texture(_LightTextureB0, u_xlat0.xx);
				u_xlat0.x = u_xlat15 * u_xlat10_3.w;
				u_xlat0.x = u_xlat2.x * u_xlat0.x;
				float u_xlat16_0;
				u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
				u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
				u_xlat10_3 = texture(_LightTexture0, u_xlat0.xyz);
				u_xlat16_0 = u_xlat10_2.w * u_xlat10_3.w;
				u_xlat0.x = u_xlat15 * u_xlat16_0;
				u_xlat10_2 = texture(_LightTexture0, u_xlat0.xy);
				u_xlat0.x = u_xlat10.x * u_xlat10_2.w;
				float4 u_xlat10_1;
				bool u_xlatb1;
				float2 u_xlat2;
				float4 u_xlat4;
				float2 u_xlat5;
				float u_xlat10;
				bfloat2 u_xlatb10;

				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb0){
				u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
				u_xlat5.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat5.xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat5.xyz;
				u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
				u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
				u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
				} else {
				u_xlat0.x = float(1.0);
				u_xlat0.y = float(1.0);
				u_xlat0.z = float(1.0);
				u_xlat0.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb0){
				u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
				u_xlat5.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat5.xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat5.xyz;
				u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
				u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
				u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
				} else {
				u_xlat0.x = float(1.0);
				u_xlat0.y = float(1.0);
				u_xlat0.z = float(1.0);
				u_xlat0.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.xyz = (-output.vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
				u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
				u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
				u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
				u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
				u_xlat5.xyz = output.vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
				u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
				u_xlat5.x = sqrt(u_xlat5.x);
				u_xlat5.x = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat0.x;
				u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb5){
				u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
				u_xlat2.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat2.xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
				u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat2.x = max(u_xlat15, u_xlat10.x);
				u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
				} else {
				u_xlat2.x = float(1.0);
				u_xlat2.y = float(1.0);
				u_xlat2.z = float(1.0);
				u_xlat2.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.xyz = (-output.vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
				u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
				u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
				u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
				u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
				u_xlat5.xyz = output.vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
				u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
				u_xlat5.x = sqrt(u_xlat5.x);
				u_xlat5.x = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat0.x;
				u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb5){
				u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
				u_xlat2.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat2.xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
				u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat2.x = max(u_xlat15, u_xlat10.x);
				u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
				} else {
				u_xlat2.x = float(1.0);
				u_xlat2.y = float(1.0);
				u_xlat2.z = float(1.0);
				u_xlat2.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb0){
				u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
				u_xlat5.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat5.xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat5.xyz;
				u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
				u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
				u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
				} else {
				u_xlat0.x = float(1.0);
				u_xlat0.y = float(1.0);
				u_xlat0.z = float(1.0);
				u_xlat0.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb0){
				u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
				u_xlat5.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat5.xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat5.xyz;
				u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
				u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
				u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
				} else {
				u_xlat0.x = float(1.0);
				u_xlat0.y = float(1.0);
				u_xlat0.z = float(1.0);
				u_xlat0.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.xyz = (-output.vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
				u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
				u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
				u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
				u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
				u_xlat5.xyz = output.vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
				u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
				u_xlat5.x = sqrt(u_xlat5.x);
				u_xlat5.x = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat0.x;
				u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb5){
				u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
				u_xlat2.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat2.xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
				u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat2.x = max(u_xlat15, u_xlat10.x);
				u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
				} else {
				u_xlat2.x = float(1.0);
				u_xlat2.y = float(1.0);
				u_xlat2.z = float(1.0);
				u_xlat2.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.xyz = (-output.vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
				u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
				u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
				u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
				u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
				u_xlat5.xyz = output.vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
				u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
				u_xlat5.x = sqrt(u_xlat5.x);
				u_xlat5.x = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat0.x;
				u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlatb5 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb5){
				u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
				u_xlat2.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat2.xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
				u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat2.x = max(u_xlat15, u_xlat10.x);
				u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
				} else {
				u_xlat2.x = float(1.0);
				u_xlat2.y = float(1.0);
				u_xlat2.z = float(1.0);
				u_xlat2.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
				u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat0.xyz;
				u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat0.xyz;
				u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
				u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb15){
				u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
				u_xlat2.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat2.xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat2.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat15 = u_xlat2.y * 0.25 + 0.75;
				u_xlat7 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat2.x = max(u_xlat15, u_xlat7);
				u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
				} else {
				u_xlat2.x = float(1.0);
				u_xlat2.y = float(1.0);
				u_xlat2.z = float(1.0);
				u_xlat2.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb0){
				u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
				u_xlat5.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat5.xyz;
				u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat5.xyz;
				u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat5.x = u_xlat0.y * 0.25 + 0.75;
				u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat0.x = max(u_xlat5.x, u_xlat2.x);
				u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
				} else {
				u_xlat0.x = float(1.0);
				u_xlat0.y = float(1.0);
				u_xlat0.z = float(1.0);
				u_xlat0.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0 = output.vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
				u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * output.vs_TEXCOORD2.xxxx + u_xlat0;
				u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * output.vs_TEXCOORD2.zzzz + u_xlat0;
				u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
				u_xlatb2.x = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb2.x){
				u_xlatb2.x = unity_ProbeVolumeParams.y==1.0;
				u_xlat7.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat7.xyz;
				u_xlat7.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat7.xyz;
				u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat2.xyz = (u_xlatb2.x) ? u_xlat7.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat7.x = u_xlat2.y * 0.25 + 0.75;
				u_xlat3.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat2.x = max(u_xlat7.x, u_xlat3.x);
				u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
				} else {
				u_xlat2.x = float(1.0);
				u_xlat2.y = float(1.0);
				u_xlat2.z = float(1.0);
				u_xlat2.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
				u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat0.xyz;
				u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat0.xyz;
				u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
				u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb15){
				u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
				u_xlat2.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat2.xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat2.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat15 = u_xlat2.y * 0.25 + 0.75;
				u_xlat7 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat2.x = max(u_xlat15, u_xlat7);
				u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
				} else {
				u_xlat2.x = float(1.0);
				u_xlat2.y = float(1.0);
				u_xlat2.z = float(1.0);
				u_xlat2.w = float(1.0);
				//ENDIF
				u_xlat0.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat0.xy;
				u_xlat10.x = _Time.y / _GlitchInterval;
				u_xlat10.x = floor(u_xlat10.x);
				u_xlat0.x = u_xlat10.x * _GlitchInterval + u_xlat0.x;
				u_xlat0.x = u_xlat0.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat10.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlat11.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat11.xy = sin(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy * float2(43758.5469, 43758.5469);
				u_xlat11.xy = fract(u_xlat11.xy);
				u_xlat11.xy = u_xlat11.xy + float2(-0.5, -0.5);
				u_xlatb1.xy = lessThan(u_xlat1.xyxx, float4(_DispProbability, _ColorProbability, _DispProbability, _DispProbability)).xy;
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
				u_xlatb1.y = u_xlatb1.y && u_xlatb2.z;
				u_xlat5.x = u_xlat11.y * 0.0199999996 + 0.200000003;
				u_xlat5.x = output.vs_TEXCOORD0.y / u_xlat5.x;
				u_xlat5.x = floor(u_xlat5.x);
				u_xlat16 = (-u_xlat0.x) + u_xlat5.x;
				u_xlat0.x = u_xlat0.x + u_xlat5.x;
				u_xlat0.x = u_xlat0.x * 78.2330017;
				u_xlat0.x = u_xlat16 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb5 = u_xlat0.x>=(-u_xlat0.x);
				u_xlat16 = fract(abs(u_xlat0.x));
				u_xlat5.x = (u_xlatb5) ? u_xlat16 : (-u_xlat16);
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat0.x = (u_xlatb2.y) ? u_xlat5.x : u_xlat0.x;
				u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat0.y = output.vs_TEXCOORD0.y;
				u_xlat2 = texture(_MainTex, u_xlat0.xy);
				u_xlat3.xy = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat0.xx;
				u_xlat3.zw = u_xlat10.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_4 = texture(_MainTex, u_xlat3.xz);
				u_xlat10_3 = texture(_MainTex, u_xlat3.yw);
				u_xlat0.x = u_xlat11.x * _ColorIntensity + u_xlat0.x;
				u_xlat0.y = u_xlat11.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat0 = texture(_MainTex, u_xlat0.xy);
				u_xlat16_1 = u_xlat10_3.w + u_xlat10_4.w;
				u_xlat1.x = u_xlat0.w + u_xlat16_1;
				u_xlat0.w = u_xlat1.x * 0.333333343;
				u_xlat0.x = u_xlat10_4.x;
				u_xlat0.y = u_xlat10_3.y;
				u_xlat0 = (u_xlatb1.y) ? u_xlat0 : u_xlat2;
				u_xlat1 = u_xlat0 * output.vs_COLOR0;
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.x = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlatb0 = u_xlat0.x<0.0;
				if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
				u_xlat0.xy = output.vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * output.vs_TEXCOORD2.xx + u_xlat0.xy;
				u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * output.vs_TEXCOORD2.zz + u_xlat0.xy;
				u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
				u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
				if(u_xlatb10){
				u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
				u_xlat2.xyz = output.vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * output.vs_TEXCOORD2.xxx + u_xlat2.xyz;
				u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * output.vs_TEXCOORD2.zzz + u_xlat2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
				u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : output.vs_TEXCOORD2.xyz;
				u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
				u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
				u_xlat10.x = u_xlat2.y * 0.25 + 0.75;
				u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
				u_xlat2.x = max(u_xlat15, u_xlat10.x);
				u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
				} else {
				u_xlat2.x = float(1.0);
				u_xlat2.y = float(1.0);
				u_xlat2.z = float(1.0);
				u_xlat2.w = float(1.0);
				//ENDIF
				u_xlat0.x = _Time.y / _GlitchInterval;
				u_xlat0.x = floor(u_xlat0.x);
				u_xlat5.xy = unity_ObjectToWorld[3].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
				u_xlat5.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * unity_ObjectToWorld[3].xx + u_xlat5.xy;
				u_xlat5.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * unity_ObjectToWorld[3].zz + u_xlat5.xy;
				u_xlat5.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * unity_ObjectToWorld[3].ww + u_xlat5.xy;
				u_xlat0.x = u_xlat0.x * _GlitchInterval + u_xlat5.x;
				u_xlat0.x = u_xlat5.y + u_xlat0.x;
				u_xlat5.x = u_xlat0.x + 2.79299998;
				u_xlat5.xy = u_xlat5.xx * float2(-91.2228012, 91.2228012);
				u_xlat5.xy = sin(u_xlat5.xy);
				u_xlat5.xy = u_xlat5.xy * float2(43758.5469, 43758.5469);
				u_xlat5.xy = fract(u_xlat5.xy);
				u_xlat5.xy = u_xlat5.xy + float2(-0.5, -0.5);
				u_xlat10 = u_xlat5.y * 0.0199999996 + 0.200000003;
				u_xlat10 = output.vs_TEXCOORD0.y / u_xlat10;
				u_xlat10 = floor(u_xlat10);
				u_xlat15 = u_xlat0.x + u_xlat10;
				u_xlat10 = (-u_xlat0.x) + u_xlat10;
				u_xlat1 = u_xlat0.xxxx * float4(-65.2432022, 91.2228012, 65.2432022, -91.2228012);
				u_xlat1 = sin(u_xlat1);
				u_xlat1 = u_xlat1 * float4(43758.5469, 43758.5469, 43758.5469, 43758.5469);
				u_xlat1 = fract(u_xlat1);
				u_xlat0.x = u_xlat15 * 78.2330017;
				u_xlat0.x = u_xlat10 * 12.9898005 + u_xlat0.x;
				u_xlat0.x = sin(u_xlat0.x);
				u_xlat0.x = u_xlat0.x * 43758.5469;
				u_xlat0.x = fract(u_xlat0.x);
				u_xlat0.x = u_xlat0.x + -0.5;
				u_xlat0.x = u_xlat0.x * _DispIntensity + output.vs_TEXCOORD0.x;
				u_xlatb10.x = u_xlat0.x>=(-u_xlat0.x);
				u_xlat15 = fract(abs(u_xlat0.x));
				u_xlat0.x = u_xlat0.x;
				u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
				u_xlat10 = (u_xlatb10.x) ? u_xlat15 : (-u_xlat15);
				u_xlatb2.xyz = equal(float4(_DispGlitchOn, _WrapDispCoords, _ColorGlitchOn, _DispGlitchOn), float4(1.0, 1.0, 1.0, 0.0)).xyz;
				u_xlat0.x = (u_xlatb2.y) ? u_xlat10 : u_xlat0.x;
				u_xlatb10.xy = lessThan(u_xlat1.xyxy, float4(_DispProbability, _ColorProbability, _DispProbability, _ColorProbability)).xy;
				u_xlat1.xy = u_xlat1.zw + float2(-0.5, -0.5);
				u_xlatb10.x = u_xlatb2.x && u_xlatb10.x;
				u_xlatb10.y = u_xlatb2.z && u_xlatb10.y;
				u_xlat2.x = (u_xlatb10.x) ? u_xlat0.x : output.vs_TEXCOORD0.x;
				u_xlat3.x = u_xlat5.x * _ColorIntensity + u_xlat2.x;
				u_xlat3.y = u_xlat5.x * _ColorIntensity + output.vs_TEXCOORD0.y;
				u_xlat3 = texture(_MainTex, u_xlat3.xy);
				u_xlat4.xy = u_xlat1.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + u_xlat2.xx;
				u_xlat4.zw = u_xlat1.xy * float2(float2(_ColorIntensity, _ColorIntensity)) + output.vs_TEXCOORD0.yy;
				u_xlat10_1 = texture(_MainTex, u_xlat4.xz);
				u_xlat10_4 = texture(_MainTex, u_xlat4.yw);
				u_xlat16_0 = u_xlat10_1.w + u_xlat10_4.w;
				u_xlat3.x = u_xlat10_1.x;
				u_xlat3.y = u_xlat10_4.y;
				u_xlat0.x = u_xlat3.w + u_xlat16_0;
				u_xlat3.w = u_xlat0.x * 0.333333343;
				u_xlat2.y = output.vs_TEXCOORD0.y;
				u_xlat1 = texture(_MainTex, u_xlat2.xy);
				u_xlat0 = (u_xlatb10.y) ? u_xlat3 : u_xlat1;
				u_xlat1.x = u_xlat0.w * output.vs_COLOR0.w + -0.100000001;
				u_xlatb1 = u_xlat1.x<0.0;
				if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
				u_xlat15 = u_xlat0.w * output.vs_COLOR0.w + (-_Cutoff);
				u_xlat0.xyz = u_xlat0.xyz * output.vs_COLOR0.xyz;
				u_xlat0.xyz = log2(u_xlat0.xyz);
				u_xlatb15 = u_xlat15<0.0;
				if((int(u_xlatb15) * int(0xffffffffu))!=0){discard;}
				u_xlat15 = unity_OneOverOutputBoost;
				u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
				u_xlat0.xyz = u_xlat0.xyz * float3(u_xlat15);
				u_xlat0.xyz = exp2(u_xlat0.xyz);
				u_xlat0.xyz = min(u_xlat0.xyz, float3(float3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
				u_xlat0.w = 1.0;
				u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : float4(0.0, 0.0, 0.0, 0.0);
				finalOutput = (unity_MetaFragmentControl.y) ? float4(0.0, 0.0, 0.0, 1.0) : u_xlat0;

				return finalOutput;
			}

			ENDCG
		}
	}
}
